// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2019 20:41:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	SelULA,
	X,
	Y,
	sampler_tx
);
input [2:0] SelULA;
input [0:0] X;
input [0:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(SelULA or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	AC,
	N,
	Z,
	sampler_rx
);
input [0:0] AC;
input  N;
input  Z;
input sampler_rx;

reg [0:0] AC_expected;
reg  N_expected;
reg  Z_expected;

reg [0:0] AC_prev;
reg  N_prev;
reg  Z_prev;

reg [0:0] AC_expected_prev;
reg  N_expected_prev;
reg  Z_expected_prev;

reg [0:0] last_AC_exp;
reg  last_N_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_prev = AC;
	N_prev = N;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	AC_expected_prev = AC_expected;
	N_expected_prev = N_expected;
	Z_expected_prev = Z_expected;
end



// expected AC
initial
begin
	AC_expected[0] = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected AC[0]
initial
begin
	AC_expected[0] = 1'bX;
end 
// generate trigger
always @(AC_expected or AC or N_expected or N or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC = %b | expected N = %b | expected Z = %b | ",AC_expected_prev,N_expected_prev,Z_expected_prev);
	$display("| real AC = %b | real N = %b | real Z = %b | ",AC_prev,N_prev,Z_prev);
`endif
	if (
		( AC_expected_prev !== 1'bx ) && ( AC_prev !== AC_expected_prev )
		&& ((AC_expected_prev !== last_AC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_expected_prev);
		$display ("     Real value = %b", AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_exp = AC_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] SelULA;
reg [0:0] X;
reg [0:0] Y;
// wires                                               
wire [0:0] AC;
wire N;
wire Z;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.AC(AC),
	.N(N),
	.SelULA(SelULA),
	.X(X),
	.Y(Y),
	.Z(Z)
);
// SelULA[ 2 ]
initial
begin
	SelULA[2] = 1'b0;
	SelULA[2] = #600000 1'b1;
end 
// SelULA[ 1 ]
initial
begin
	SelULA[1] = 1'b0;
	SelULA[1] = #300000 1'b1;
	SelULA[1] = #300000 1'b0;
	SelULA[1] = #300000 1'b1;
end 
// SelULA[ 0 ]
initial
begin
	repeat(3)
	begin
		SelULA[0] = 1'b0;
		SelULA[0] = #150000 1'b1;
		# 150000;
	end
	SelULA[0] = 1'b0;
end 

// X[0]
always
begin
	X[0] = 1'b0;
	X[0] = #62500 1'b1;
	#62500;
end 

// Y[0]
always
begin
	Y[0] = 1'b0;
	Y[0] = #31250 1'b1;
	#31250;
end 

ULA_vlg_sample_tst tb_sample (
	.SelULA(SelULA),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.AC(AC),
	.N(N),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2019 16:33:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Neander_vlg_sample_tst(
	CargaAC,
	CargaPC,
	CargaRDM,
	CargaREM,
	CLK,
	CLKmaq,
	Gravar,
	sampler_tx
);
input [7:0] CargaAC;
input [3:0] CargaPC;
input [15:0] CargaRDM;
input [3:0] CargaREM;
input  CLK;
input  CLKmaq;
input  Gravar;
output sampler_tx;

reg sample;
time current_time;
always @(CargaAC or CargaPC or CargaRDM or CargaREM or CLK or CLKmaq or Gravar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Neander_vlg_check_tst (
	Display1,
	Display2,
	Display3,
	Display4,
	Encerra,
	Saida,
	tINMEM,
	tOUTAC,
	tOUTMEM,
	tOUTMUX,
	tOUTPC,
	tOUTRDM,
	tOUTREM,
	tOUTULA,
	tR,
	tSel,
	tW,
	sampler_rx
);
input [6:0] Display1;
input [6:0] Display2;
input [6:0] Display3;
input [6:0] Display4;
input  Encerra;
input [7:0] Saida;
input [15:0] tINMEM;
input [7:0] tOUTAC;
input [15:0] tOUTMEM;
input [3:0] tOUTMUX;
input [3:0] tOUTPC;
input [15:0] tOUTRDM;
input [3:0] tOUTREM;
input [7:0] tOUTULA;
input  tR;
input  tSel;
input  tW;
input sampler_rx;

reg [6:0] Display1_expected;
reg [6:0] Display2_expected;
reg [6:0] Display3_expected;
reg [6:0] Display4_expected;
reg  Encerra_expected;
reg [7:0] Saida_expected;
reg [15:0] tINMEM_expected;
reg [7:0] tOUTAC_expected;
reg [15:0] tOUTMEM_expected;
reg [3:0] tOUTMUX_expected;
reg [3:0] tOUTPC_expected;
reg [15:0] tOUTRDM_expected;
reg [3:0] tOUTREM_expected;
reg [7:0] tOUTULA_expected;
reg  tR_expected;
reg  tSel_expected;
reg  tW_expected;

reg [6:0] Display1_prev;
reg [6:0] Display2_prev;
reg [6:0] Display3_prev;
reg [6:0] Display4_prev;
reg  Encerra_prev;
reg [7:0] Saida_prev;
reg [15:0] tINMEM_prev;
reg [7:0] tOUTAC_prev;
reg [15:0] tOUTMEM_prev;
reg [3:0] tOUTMUX_prev;
reg [3:0] tOUTPC_prev;
reg [15:0] tOUTRDM_prev;
reg [3:0] tOUTREM_prev;
reg [7:0] tOUTULA_prev;
reg  tR_prev;
reg  tSel_prev;
reg  tW_prev;

reg [6:0] Display1_expected_prev;
reg [6:0] Display2_expected_prev;
reg [6:0] Display3_expected_prev;
reg [6:0] Display4_expected_prev;
reg  Encerra_expected_prev;
reg [7:0] Saida_expected_prev;
reg [7:0] tOUTAC_expected_prev;
reg [15:0] tOUTMEM_expected_prev;
reg [3:0] tOUTMUX_expected_prev;
reg [3:0] tOUTPC_expected_prev;
reg [15:0] tOUTRDM_expected_prev;
reg [3:0] tOUTREM_expected_prev;
reg [7:0] tOUTULA_expected_prev;
reg  tR_expected_prev;
reg  tSel_expected_prev;
reg  tW_expected_prev;

reg [6:0] last_Display1_exp;
reg [6:0] last_Display2_exp;
reg [6:0] last_Display3_exp;
reg [6:0] last_Display4_exp;
reg  last_Encerra_exp;
reg [7:0] last_Saida_exp;
reg [7:0] last_tOUTAC_exp;
reg [15:0] last_tOUTMEM_exp;
reg [3:0] last_tOUTMUX_exp;
reg [3:0] last_tOUTPC_exp;
reg [15:0] last_tOUTRDM_exp;
reg [3:0] last_tOUTREM_exp;
reg [7:0] last_tOUTULA_exp;
reg  last_tR_exp;
reg  last_tSel_exp;
reg  last_tW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	Display1_prev = Display1;
	Display2_prev = Display2;
	Display3_prev = Display3;
	Display4_prev = Display4;
	Encerra_prev = Encerra;
	Saida_prev = Saida;
	tINMEM_prev = tINMEM;
	tOUTAC_prev = tOUTAC;
	tOUTMEM_prev = tOUTMEM;
	tOUTMUX_prev = tOUTMUX;
	tOUTPC_prev = tOUTPC;
	tOUTRDM_prev = tOUTRDM;
	tOUTREM_prev = tOUTREM;
	tOUTULA_prev = tOUTULA;
	tR_prev = tR;
	tSel_prev = tSel;
	tW_prev = tW;
end

// update expected /o prevs

always @(trigger)
begin
	Display1_expected_prev = Display1_expected;
	Display2_expected_prev = Display2_expected;
	Display3_expected_prev = Display3_expected;
	Display4_expected_prev = Display4_expected;
	Encerra_expected_prev = Encerra_expected;
	Saida_expected_prev = Saida_expected;
	tOUTAC_expected_prev = tOUTAC_expected;
	tOUTMEM_expected_prev = tOUTMEM_expected;
	tOUTMUX_expected_prev = tOUTMUX_expected;
	tOUTPC_expected_prev = tOUTPC_expected;
	tOUTRDM_expected_prev = tOUTRDM_expected;
	tOUTREM_expected_prev = tOUTREM_expected;
	tOUTULA_expected_prev = tOUTULA_expected;
	tR_expected_prev = tR_expected;
	tSel_expected_prev = tSel_expected;
	tW_expected_prev = tW_expected;
end



// expected Encerra
initial
begin
	Encerra_expected = 1'bX;
end 
// expected Saida[ 7 ]
initial
begin
	Saida_expected[7] = 1'bX;
end 
// expected Saida[ 6 ]
initial
begin
	Saida_expected[6] = 1'bX;
end 
// expected Saida[ 5 ]
initial
begin
	Saida_expected[5] = 1'bX;
end 
// expected Saida[ 4 ]
initial
begin
	Saida_expected[4] = 1'bX;
end 
// expected Saida[ 3 ]
initial
begin
	Saida_expected[3] = 1'bX;
end 
// expected Saida[ 2 ]
initial
begin
	Saida_expected[2] = 1'bX;
end 
// expected Saida[ 1 ]
initial
begin
	Saida_expected[1] = 1'bX;
end 
// expected Saida[ 0 ]
initial
begin
	Saida_expected[0] = 1'bX;
end 
// expected tOUTAC[ 7 ]
initial
begin
	tOUTAC_expected[7] = 1'bX;
end 
// expected tOUTAC[ 6 ]
initial
begin
	tOUTAC_expected[6] = 1'bX;
end 
// expected tOUTAC[ 5 ]
initial
begin
	tOUTAC_expected[5] = 1'bX;
end 
// expected tOUTAC[ 4 ]
initial
begin
	tOUTAC_expected[4] = 1'bX;
end 
// expected tOUTAC[ 3 ]
initial
begin
	tOUTAC_expected[3] = 1'bX;
end 
// expected tOUTAC[ 2 ]
initial
begin
	tOUTAC_expected[2] = 1'bX;
end 
// expected tOUTAC[ 1 ]
initial
begin
	tOUTAC_expected[1] = 1'bX;
end 
// expected tOUTAC[ 0 ]
initial
begin
	tOUTAC_expected[0] = 1'bX;
end 
// expected tOUTPC[ 3 ]
initial
begin
	tOUTPC_expected[3] = 1'bX;
end 
// expected tOUTPC[ 2 ]
initial
begin
	tOUTPC_expected[2] = 1'bX;
end 
// expected tOUTPC[ 1 ]
initial
begin
	tOUTPC_expected[1] = 1'bX;
end 
// expected tOUTPC[ 0 ]
initial
begin
	tOUTPC_expected[0] = 1'bX;
end 
// expected tOUTRDM[ 15 ]
initial
begin
	tOUTRDM_expected[15] = 1'bX;
end 
// expected tOUTRDM[ 14 ]
initial
begin
	tOUTRDM_expected[14] = 1'bX;
end 
// expected tOUTRDM[ 13 ]
initial
begin
	tOUTRDM_expected[13] = 1'bX;
end 
// expected tOUTRDM[ 12 ]
initial
begin
	tOUTRDM_expected[12] = 1'bX;
end 
// expected tOUTRDM[ 11 ]
initial
begin
	tOUTRDM_expected[11] = 1'bX;
end 
// expected tOUTRDM[ 10 ]
initial
begin
	tOUTRDM_expected[10] = 1'bX;
end 
// expected tOUTRDM[ 9 ]
initial
begin
	tOUTRDM_expected[9] = 1'bX;
end 
// expected tOUTRDM[ 8 ]
initial
begin
	tOUTRDM_expected[8] = 1'bX;
end 
// expected tOUTRDM[ 7 ]
initial
begin
	tOUTRDM_expected[7] = 1'bX;
end 
// expected tOUTRDM[ 6 ]
initial
begin
	tOUTRDM_expected[6] = 1'bX;
end 
// expected tOUTRDM[ 5 ]
initial
begin
	tOUTRDM_expected[5] = 1'bX;
end 
// expected tOUTRDM[ 4 ]
initial
begin
	tOUTRDM_expected[4] = 1'bX;
end 
// expected tOUTRDM[ 3 ]
initial
begin
	tOUTRDM_expected[3] = 1'bX;
end 
// expected tOUTRDM[ 2 ]
initial
begin
	tOUTRDM_expected[2] = 1'bX;
end 
// expected tOUTRDM[ 1 ]
initial
begin
	tOUTRDM_expected[1] = 1'bX;
end 
// expected tOUTRDM[ 0 ]
initial
begin
	tOUTRDM_expected[0] = 1'bX;
end 
// expected tOUTREM[ 3 ]
initial
begin
	tOUTREM_expected[3] = 1'bX;
end 
// expected tOUTREM[ 2 ]
initial
begin
	tOUTREM_expected[2] = 1'bX;
end 
// expected tOUTREM[ 1 ]
initial
begin
	tOUTREM_expected[1] = 1'bX;
end 
// expected tOUTREM[ 0 ]
initial
begin
	tOUTREM_expected[0] = 1'bX;
end 
// expected tOUTMEM[ 15 ]
initial
begin
	tOUTMEM_expected[15] = 1'bX;
end 
// expected tOUTMEM[ 14 ]
initial
begin
	tOUTMEM_expected[14] = 1'bX;
end 
// expected tOUTMEM[ 13 ]
initial
begin
	tOUTMEM_expected[13] = 1'bX;
end 
// expected tOUTMEM[ 12 ]
initial
begin
	tOUTMEM_expected[12] = 1'bX;
end 
// expected tOUTMEM[ 11 ]
initial
begin
	tOUTMEM_expected[11] = 1'bX;
end 
// expected tOUTMEM[ 10 ]
initial
begin
	tOUTMEM_expected[10] = 1'bX;
end 
// expected tOUTMEM[ 9 ]
initial
begin
	tOUTMEM_expected[9] = 1'bX;
end 
// expected tOUTMEM[ 8 ]
initial
begin
	tOUTMEM_expected[8] = 1'bX;
end 
// expected tOUTMEM[ 7 ]
initial
begin
	tOUTMEM_expected[7] = 1'bX;
end 
// expected tOUTMEM[ 6 ]
initial
begin
	tOUTMEM_expected[6] = 1'bX;
end 
// expected tOUTMEM[ 5 ]
initial
begin
	tOUTMEM_expected[5] = 1'bX;
end 
// expected tOUTMEM[ 4 ]
initial
begin
	tOUTMEM_expected[4] = 1'bX;
end 
// expected tOUTMEM[ 3 ]
initial
begin
	tOUTMEM_expected[3] = 1'bX;
end 
// expected tOUTMEM[ 2 ]
initial
begin
	tOUTMEM_expected[2] = 1'bX;
end 
// expected tOUTMEM[ 1 ]
initial
begin
	tOUTMEM_expected[1] = 1'bX;
end 
// expected tOUTMEM[ 0 ]
initial
begin
	tOUTMEM_expected[0] = 1'bX;
end 
// expected tOUTULA[ 7 ]
initial
begin
	tOUTULA_expected[7] = 1'bX;
end 
// expected tOUTULA[ 6 ]
initial
begin
	tOUTULA_expected[6] = 1'bX;
end 
// expected tOUTULA[ 5 ]
initial
begin
	tOUTULA_expected[5] = 1'bX;
end 
// expected tOUTULA[ 4 ]
initial
begin
	tOUTULA_expected[4] = 1'bX;
end 
// expected tOUTULA[ 3 ]
initial
begin
	tOUTULA_expected[3] = 1'bX;
end 
// expected tOUTULA[ 2 ]
initial
begin
	tOUTULA_expected[2] = 1'bX;
end 
// expected tOUTULA[ 1 ]
initial
begin
	tOUTULA_expected[1] = 1'bX;
end 
// expected tOUTULA[ 0 ]
initial
begin
	tOUTULA_expected[0] = 1'bX;
end 

// expected tR
initial
begin
	tR_expected = 1'bX;
end 

// expected tW
initial
begin
	tW_expected = 1'bX;
end 
// expected tOUTMUX[ 3 ]
initial
begin
	tOUTMUX_expected[3] = 1'bX;
end 
// expected tOUTMUX[ 2 ]
initial
begin
	tOUTMUX_expected[2] = 1'bX;
end 
// expected tOUTMUX[ 1 ]
initial
begin
	tOUTMUX_expected[1] = 1'bX;
end 
// expected tOUTMUX[ 0 ]
initial
begin
	tOUTMUX_expected[0] = 1'bX;
end 

// expected tSel
initial
begin
	tSel_expected = 1'bX;
end 
// expected Display1[ 6 ]
initial
begin
	Display1_expected[6] = 1'bX;
end 
// expected Display1[ 5 ]
initial
begin
	Display1_expected[5] = 1'bX;
end 
// expected Display1[ 4 ]
initial
begin
	Display1_expected[4] = 1'bX;
end 
// expected Display1[ 3 ]
initial
begin
	Display1_expected[3] = 1'bX;
end 
// expected Display1[ 2 ]
initial
begin
	Display1_expected[2] = 1'bX;
end 
// expected Display1[ 1 ]
initial
begin
	Display1_expected[1] = 1'bX;
end 
// expected Display1[ 0 ]
initial
begin
	Display1_expected[0] = 1'bX;
end 
// expected Display2[ 6 ]
initial
begin
	Display2_expected[6] = 1'bX;
end 
// expected Display2[ 5 ]
initial
begin
	Display2_expected[5] = 1'bX;
end 
// expected Display2[ 4 ]
initial
begin
	Display2_expected[4] = 1'bX;
end 
// expected Display2[ 3 ]
initial
begin
	Display2_expected[3] = 1'bX;
end 
// expected Display2[ 2 ]
initial
begin
	Display2_expected[2] = 1'bX;
end 
// expected Display2[ 1 ]
initial
begin
	Display2_expected[1] = 1'bX;
end 
// expected Display2[ 0 ]
initial
begin
	Display2_expected[0] = 1'bX;
end 
// expected Display3[ 6 ]
initial
begin
	Display3_expected[6] = 1'bX;
end 
// expected Display3[ 5 ]
initial
begin
	Display3_expected[5] = 1'bX;
end 
// expected Display3[ 4 ]
initial
begin
	Display3_expected[4] = 1'bX;
end 
// expected Display3[ 3 ]
initial
begin
	Display3_expected[3] = 1'bX;
end 
// expected Display3[ 2 ]
initial
begin
	Display3_expected[2] = 1'bX;
end 
// expected Display3[ 1 ]
initial
begin
	Display3_expected[1] = 1'bX;
end 
// expected Display3[ 0 ]
initial
begin
	Display3_expected[0] = 1'bX;
end 
// expected Display4[ 6 ]
initial
begin
	Display4_expected[6] = 1'bX;
end 
// expected Display4[ 5 ]
initial
begin
	Display4_expected[5] = 1'bX;
end 
// expected Display4[ 4 ]
initial
begin
	Display4_expected[4] = 1'bX;
end 
// expected Display4[ 3 ]
initial
begin
	Display4_expected[3] = 1'bX;
end 
// expected Display4[ 2 ]
initial
begin
	Display4_expected[2] = 1'bX;
end 
// expected Display4[ 1 ]
initial
begin
	Display4_expected[1] = 1'bX;
end 
// expected Display4[ 0 ]
initial
begin
	Display4_expected[0] = 1'bX;
end 
// generate trigger
always @(Display1_expected or Display1 or Display2_expected or Display2 or Display3_expected or Display3 or Display4_expected or Display4 or Encerra_expected or Encerra or Saida_expected or Saida or tINMEM_expected or tINMEM or tOUTAC_expected or tOUTAC or tOUTMEM_expected or tOUTMEM or tOUTMUX_expected or tOUTMUX or tOUTPC_expected or tOUTPC or tOUTRDM_expected or tOUTRDM or tOUTREM_expected or tOUTREM or tOUTULA_expected or tOUTULA or tR_expected or tR or tSel_expected or tSel or tW_expected or tW)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Display1 = %b | expected Display2 = %b | expected Display3 = %b | expected Display4 = %b | expected Encerra = %b | expected Saida = %b | expected tINMEM = %b | expected tOUTAC = %b | expected tOUTMEM = %b | expected tOUTMUX = %b | expected tOUTPC = %b | expected tOUTRDM = %b | expected tOUTREM = %b | expected tOUTULA = %b | expected tR = %b | expected tSel = %b | expected tW = %b | ",Display1_expected_prev,Display2_expected_prev,Display3_expected_prev,Display4_expected_prev,Encerra_expected_prev,Saida_expected_prev,tINMEM_expected_prev,tOUTAC_expected_prev,tOUTMEM_expected_prev,tOUTMUX_expected_prev,tOUTPC_expected_prev,tOUTRDM_expected_prev,tOUTREM_expected_prev,tOUTULA_expected_prev,tR_expected_prev,tSel_expected_prev,tW_expected_prev);
	$display("| real Display1 = %b | real Display2 = %b | real Display3 = %b | real Display4 = %b | real Encerra = %b | real Saida = %b | real tINMEM = %b | real tOUTAC = %b | real tOUTMEM = %b | real tOUTMUX = %b | real tOUTPC = %b | real tOUTRDM = %b | real tOUTREM = %b | real tOUTULA = %b | real tR = %b | real tSel = %b | real tW = %b | ",Display1_prev,Display2_prev,Display3_prev,Display4_prev,Encerra_prev,Saida_prev,tINMEM_prev,tOUTAC_prev,tOUTMEM_prev,tOUTMUX_prev,tOUTPC_prev,tOUTRDM_prev,tOUTREM_prev,tOUTULA_prev,tR_prev,tSel_prev,tW_prev);
`endif
	if (
		( Display1_expected_prev[0] !== 1'bx ) && ( Display1_prev[0] !== Display1_expected_prev[0] )
		&& ((Display1_expected_prev[0] !== last_Display1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[0] = Display1_expected_prev[0];
	end
	if (
		( Display1_expected_prev[1] !== 1'bx ) && ( Display1_prev[1] !== Display1_expected_prev[1] )
		&& ((Display1_expected_prev[1] !== last_Display1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[1] = Display1_expected_prev[1];
	end
	if (
		( Display1_expected_prev[2] !== 1'bx ) && ( Display1_prev[2] !== Display1_expected_prev[2] )
		&& ((Display1_expected_prev[2] !== last_Display1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[2] = Display1_expected_prev[2];
	end
	if (
		( Display1_expected_prev[3] !== 1'bx ) && ( Display1_prev[3] !== Display1_expected_prev[3] )
		&& ((Display1_expected_prev[3] !== last_Display1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[3] = Display1_expected_prev[3];
	end
	if (
		( Display1_expected_prev[4] !== 1'bx ) && ( Display1_prev[4] !== Display1_expected_prev[4] )
		&& ((Display1_expected_prev[4] !== last_Display1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[4] = Display1_expected_prev[4];
	end
	if (
		( Display1_expected_prev[5] !== 1'bx ) && ( Display1_prev[5] !== Display1_expected_prev[5] )
		&& ((Display1_expected_prev[5] !== last_Display1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[5] = Display1_expected_prev[5];
	end
	if (
		( Display1_expected_prev[6] !== 1'bx ) && ( Display1_prev[6] !== Display1_expected_prev[6] )
		&& ((Display1_expected_prev[6] !== last_Display1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display1_expected_prev);
		$display ("     Real value = %b", Display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Display1_exp[6] = Display1_expected_prev[6];
	end
	if (
		( Display2_expected_prev[0] !== 1'bx ) && ( Display2_prev[0] !== Display2_expected_prev[0] )
		&& ((Display2_expected_prev[0] !== last_Display2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[0] = Display2_expected_prev[0];
	end
	if (
		( Display2_expected_prev[1] !== 1'bx ) && ( Display2_prev[1] !== Display2_expected_prev[1] )
		&& ((Display2_expected_prev[1] !== last_Display2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[1] = Display2_expected_prev[1];
	end
	if (
		( Display2_expected_prev[2] !== 1'bx ) && ( Display2_prev[2] !== Display2_expected_prev[2] )
		&& ((Display2_expected_prev[2] !== last_Display2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[2] = Display2_expected_prev[2];
	end
	if (
		( Display2_expected_prev[3] !== 1'bx ) && ( Display2_prev[3] !== Display2_expected_prev[3] )
		&& ((Display2_expected_prev[3] !== last_Display2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[3] = Display2_expected_prev[3];
	end
	if (
		( Display2_expected_prev[4] !== 1'bx ) && ( Display2_prev[4] !== Display2_expected_prev[4] )
		&& ((Display2_expected_prev[4] !== last_Display2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[4] = Display2_expected_prev[4];
	end
	if (
		( Display2_expected_prev[5] !== 1'bx ) && ( Display2_prev[5] !== Display2_expected_prev[5] )
		&& ((Display2_expected_prev[5] !== last_Display2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[5] = Display2_expected_prev[5];
	end
	if (
		( Display2_expected_prev[6] !== 1'bx ) && ( Display2_prev[6] !== Display2_expected_prev[6] )
		&& ((Display2_expected_prev[6] !== last_Display2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display2_expected_prev);
		$display ("     Real value = %b", Display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Display2_exp[6] = Display2_expected_prev[6];
	end
	if (
		( Display3_expected_prev[0] !== 1'bx ) && ( Display3_prev[0] !== Display3_expected_prev[0] )
		&& ((Display3_expected_prev[0] !== last_Display3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[0] = Display3_expected_prev[0];
	end
	if (
		( Display3_expected_prev[1] !== 1'bx ) && ( Display3_prev[1] !== Display3_expected_prev[1] )
		&& ((Display3_expected_prev[1] !== last_Display3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[1] = Display3_expected_prev[1];
	end
	if (
		( Display3_expected_prev[2] !== 1'bx ) && ( Display3_prev[2] !== Display3_expected_prev[2] )
		&& ((Display3_expected_prev[2] !== last_Display3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[2] = Display3_expected_prev[2];
	end
	if (
		( Display3_expected_prev[3] !== 1'bx ) && ( Display3_prev[3] !== Display3_expected_prev[3] )
		&& ((Display3_expected_prev[3] !== last_Display3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[3] = Display3_expected_prev[3];
	end
	if (
		( Display3_expected_prev[4] !== 1'bx ) && ( Display3_prev[4] !== Display3_expected_prev[4] )
		&& ((Display3_expected_prev[4] !== last_Display3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[4] = Display3_expected_prev[4];
	end
	if (
		( Display3_expected_prev[5] !== 1'bx ) && ( Display3_prev[5] !== Display3_expected_prev[5] )
		&& ((Display3_expected_prev[5] !== last_Display3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[5] = Display3_expected_prev[5];
	end
	if (
		( Display3_expected_prev[6] !== 1'bx ) && ( Display3_prev[6] !== Display3_expected_prev[6] )
		&& ((Display3_expected_prev[6] !== last_Display3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display3_expected_prev);
		$display ("     Real value = %b", Display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Display3_exp[6] = Display3_expected_prev[6];
	end
	if (
		( Display4_expected_prev[0] !== 1'bx ) && ( Display4_prev[0] !== Display4_expected_prev[0] )
		&& ((Display4_expected_prev[0] !== last_Display4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[0] = Display4_expected_prev[0];
	end
	if (
		( Display4_expected_prev[1] !== 1'bx ) && ( Display4_prev[1] !== Display4_expected_prev[1] )
		&& ((Display4_expected_prev[1] !== last_Display4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[1] = Display4_expected_prev[1];
	end
	if (
		( Display4_expected_prev[2] !== 1'bx ) && ( Display4_prev[2] !== Display4_expected_prev[2] )
		&& ((Display4_expected_prev[2] !== last_Display4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[2] = Display4_expected_prev[2];
	end
	if (
		( Display4_expected_prev[3] !== 1'bx ) && ( Display4_prev[3] !== Display4_expected_prev[3] )
		&& ((Display4_expected_prev[3] !== last_Display4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[3] = Display4_expected_prev[3];
	end
	if (
		( Display4_expected_prev[4] !== 1'bx ) && ( Display4_prev[4] !== Display4_expected_prev[4] )
		&& ((Display4_expected_prev[4] !== last_Display4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[4] = Display4_expected_prev[4];
	end
	if (
		( Display4_expected_prev[5] !== 1'bx ) && ( Display4_prev[5] !== Display4_expected_prev[5] )
		&& ((Display4_expected_prev[5] !== last_Display4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[5] = Display4_expected_prev[5];
	end
	if (
		( Display4_expected_prev[6] !== 1'bx ) && ( Display4_prev[6] !== Display4_expected_prev[6] )
		&& ((Display4_expected_prev[6] !== last_Display4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display4_expected_prev);
		$display ("     Real value = %b", Display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display4_exp[6] = Display4_expected_prev[6];
	end
	if (
		( Encerra_expected_prev !== 1'bx ) && ( Encerra_prev !== Encerra_expected_prev )
		&& ((Encerra_expected_prev !== last_Encerra_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Encerra :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Encerra_expected_prev);
		$display ("     Real value = %b", Encerra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Encerra_exp = Encerra_expected_prev;
	end
	if (
		( Saida_expected_prev[0] !== 1'bx ) && ( Saida_prev[0] !== Saida_expected_prev[0] )
		&& ((Saida_expected_prev[0] !== last_Saida_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[0] = Saida_expected_prev[0];
	end
	if (
		( Saida_expected_prev[1] !== 1'bx ) && ( Saida_prev[1] !== Saida_expected_prev[1] )
		&& ((Saida_expected_prev[1] !== last_Saida_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[1] = Saida_expected_prev[1];
	end
	if (
		( Saida_expected_prev[2] !== 1'bx ) && ( Saida_prev[2] !== Saida_expected_prev[2] )
		&& ((Saida_expected_prev[2] !== last_Saida_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[2] = Saida_expected_prev[2];
	end
	if (
		( Saida_expected_prev[3] !== 1'bx ) && ( Saida_prev[3] !== Saida_expected_prev[3] )
		&& ((Saida_expected_prev[3] !== last_Saida_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[3] = Saida_expected_prev[3];
	end
	if (
		( Saida_expected_prev[4] !== 1'bx ) && ( Saida_prev[4] !== Saida_expected_prev[4] )
		&& ((Saida_expected_prev[4] !== last_Saida_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[4] = Saida_expected_prev[4];
	end
	if (
		( Saida_expected_prev[5] !== 1'bx ) && ( Saida_prev[5] !== Saida_expected_prev[5] )
		&& ((Saida_expected_prev[5] !== last_Saida_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[5] = Saida_expected_prev[5];
	end
	if (
		( Saida_expected_prev[6] !== 1'bx ) && ( Saida_prev[6] !== Saida_expected_prev[6] )
		&& ((Saida_expected_prev[6] !== last_Saida_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[6] = Saida_expected_prev[6];
	end
	if (
		( Saida_expected_prev[7] !== 1'bx ) && ( Saida_prev[7] !== Saida_expected_prev[7] )
		&& ((Saida_expected_prev[7] !== last_Saida_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Saida_expected_prev);
		$display ("     Real value = %b", Saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Saida_exp[7] = Saida_expected_prev[7];
	end
	if (
		( tOUTAC_expected_prev[0] !== 1'bx ) && ( tOUTAC_prev[0] !== tOUTAC_expected_prev[0] )
		&& ((tOUTAC_expected_prev[0] !== last_tOUTAC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[0] = tOUTAC_expected_prev[0];
	end
	if (
		( tOUTAC_expected_prev[1] !== 1'bx ) && ( tOUTAC_prev[1] !== tOUTAC_expected_prev[1] )
		&& ((tOUTAC_expected_prev[1] !== last_tOUTAC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[1] = tOUTAC_expected_prev[1];
	end
	if (
		( tOUTAC_expected_prev[2] !== 1'bx ) && ( tOUTAC_prev[2] !== tOUTAC_expected_prev[2] )
		&& ((tOUTAC_expected_prev[2] !== last_tOUTAC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[2] = tOUTAC_expected_prev[2];
	end
	if (
		( tOUTAC_expected_prev[3] !== 1'bx ) && ( tOUTAC_prev[3] !== tOUTAC_expected_prev[3] )
		&& ((tOUTAC_expected_prev[3] !== last_tOUTAC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[3] = tOUTAC_expected_prev[3];
	end
	if (
		( tOUTAC_expected_prev[4] !== 1'bx ) && ( tOUTAC_prev[4] !== tOUTAC_expected_prev[4] )
		&& ((tOUTAC_expected_prev[4] !== last_tOUTAC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[4] = tOUTAC_expected_prev[4];
	end
	if (
		( tOUTAC_expected_prev[5] !== 1'bx ) && ( tOUTAC_prev[5] !== tOUTAC_expected_prev[5] )
		&& ((tOUTAC_expected_prev[5] !== last_tOUTAC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[5] = tOUTAC_expected_prev[5];
	end
	if (
		( tOUTAC_expected_prev[6] !== 1'bx ) && ( tOUTAC_prev[6] !== tOUTAC_expected_prev[6] )
		&& ((tOUTAC_expected_prev[6] !== last_tOUTAC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[6] = tOUTAC_expected_prev[6];
	end
	if (
		( tOUTAC_expected_prev[7] !== 1'bx ) && ( tOUTAC_prev[7] !== tOUTAC_expected_prev[7] )
		&& ((tOUTAC_expected_prev[7] !== last_tOUTAC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTAC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTAC_expected_prev);
		$display ("     Real value = %b", tOUTAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tOUTAC_exp[7] = tOUTAC_expected_prev[7];
	end
	if (
		( tOUTMEM_expected_prev[0] !== 1'bx ) && ( tOUTMEM_prev[0] !== tOUTMEM_expected_prev[0] )
		&& ((tOUTMEM_expected_prev[0] !== last_tOUTMEM_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[0] = tOUTMEM_expected_prev[0];
	end
	if (
		( tOUTMEM_expected_prev[1] !== 1'bx ) && ( tOUTMEM_prev[1] !== tOUTMEM_expected_prev[1] )
		&& ((tOUTMEM_expected_prev[1] !== last_tOUTMEM_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[1] = tOUTMEM_expected_prev[1];
	end
	if (
		( tOUTMEM_expected_prev[2] !== 1'bx ) && ( tOUTMEM_prev[2] !== tOUTMEM_expected_prev[2] )
		&& ((tOUTMEM_expected_prev[2] !== last_tOUTMEM_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[2] = tOUTMEM_expected_prev[2];
	end
	if (
		( tOUTMEM_expected_prev[3] !== 1'bx ) && ( tOUTMEM_prev[3] !== tOUTMEM_expected_prev[3] )
		&& ((tOUTMEM_expected_prev[3] !== last_tOUTMEM_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[3] = tOUTMEM_expected_prev[3];
	end
	if (
		( tOUTMEM_expected_prev[4] !== 1'bx ) && ( tOUTMEM_prev[4] !== tOUTMEM_expected_prev[4] )
		&& ((tOUTMEM_expected_prev[4] !== last_tOUTMEM_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[4] = tOUTMEM_expected_prev[4];
	end
	if (
		( tOUTMEM_expected_prev[5] !== 1'bx ) && ( tOUTMEM_prev[5] !== tOUTMEM_expected_prev[5] )
		&& ((tOUTMEM_expected_prev[5] !== last_tOUTMEM_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[5] = tOUTMEM_expected_prev[5];
	end
	if (
		( tOUTMEM_expected_prev[6] !== 1'bx ) && ( tOUTMEM_prev[6] !== tOUTMEM_expected_prev[6] )
		&& ((tOUTMEM_expected_prev[6] !== last_tOUTMEM_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[6] = tOUTMEM_expected_prev[6];
	end
	if (
		( tOUTMEM_expected_prev[7] !== 1'bx ) && ( tOUTMEM_prev[7] !== tOUTMEM_expected_prev[7] )
		&& ((tOUTMEM_expected_prev[7] !== last_tOUTMEM_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[7] = tOUTMEM_expected_prev[7];
	end
	if (
		( tOUTMEM_expected_prev[8] !== 1'bx ) && ( tOUTMEM_prev[8] !== tOUTMEM_expected_prev[8] )
		&& ((tOUTMEM_expected_prev[8] !== last_tOUTMEM_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[8] = tOUTMEM_expected_prev[8];
	end
	if (
		( tOUTMEM_expected_prev[9] !== 1'bx ) && ( tOUTMEM_prev[9] !== tOUTMEM_expected_prev[9] )
		&& ((tOUTMEM_expected_prev[9] !== last_tOUTMEM_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[9] = tOUTMEM_expected_prev[9];
	end
	if (
		( tOUTMEM_expected_prev[10] !== 1'bx ) && ( tOUTMEM_prev[10] !== tOUTMEM_expected_prev[10] )
		&& ((tOUTMEM_expected_prev[10] !== last_tOUTMEM_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[10] = tOUTMEM_expected_prev[10];
	end
	if (
		( tOUTMEM_expected_prev[11] !== 1'bx ) && ( tOUTMEM_prev[11] !== tOUTMEM_expected_prev[11] )
		&& ((tOUTMEM_expected_prev[11] !== last_tOUTMEM_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[11] = tOUTMEM_expected_prev[11];
	end
	if (
		( tOUTMEM_expected_prev[12] !== 1'bx ) && ( tOUTMEM_prev[12] !== tOUTMEM_expected_prev[12] )
		&& ((tOUTMEM_expected_prev[12] !== last_tOUTMEM_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[12] = tOUTMEM_expected_prev[12];
	end
	if (
		( tOUTMEM_expected_prev[13] !== 1'bx ) && ( tOUTMEM_prev[13] !== tOUTMEM_expected_prev[13] )
		&& ((tOUTMEM_expected_prev[13] !== last_tOUTMEM_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[13] = tOUTMEM_expected_prev[13];
	end
	if (
		( tOUTMEM_expected_prev[14] !== 1'bx ) && ( tOUTMEM_prev[14] !== tOUTMEM_expected_prev[14] )
		&& ((tOUTMEM_expected_prev[14] !== last_tOUTMEM_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[14] = tOUTMEM_expected_prev[14];
	end
	if (
		( tOUTMEM_expected_prev[15] !== 1'bx ) && ( tOUTMEM_prev[15] !== tOUTMEM_expected_prev[15] )
		&& ((tOUTMEM_expected_prev[15] !== last_tOUTMEM_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMEM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMEM_expected_prev);
		$display ("     Real value = %b", tOUTMEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tOUTMEM_exp[15] = tOUTMEM_expected_prev[15];
	end
	if (
		( tOUTMUX_expected_prev[0] !== 1'bx ) && ( tOUTMUX_prev[0] !== tOUTMUX_expected_prev[0] )
		&& ((tOUTMUX_expected_prev[0] !== last_tOUTMUX_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMUX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMUX_expected_prev);
		$display ("     Real value = %b", tOUTMUX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tOUTMUX_exp[0] = tOUTMUX_expected_prev[0];
	end
	if (
		( tOUTMUX_expected_prev[1] !== 1'bx ) && ( tOUTMUX_prev[1] !== tOUTMUX_expected_prev[1] )
		&& ((tOUTMUX_expected_prev[1] !== last_tOUTMUX_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMUX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMUX_expected_prev);
		$display ("     Real value = %b", tOUTMUX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tOUTMUX_exp[1] = tOUTMUX_expected_prev[1];
	end
	if (
		( tOUTMUX_expected_prev[2] !== 1'bx ) && ( tOUTMUX_prev[2] !== tOUTMUX_expected_prev[2] )
		&& ((tOUTMUX_expected_prev[2] !== last_tOUTMUX_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMUX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMUX_expected_prev);
		$display ("     Real value = %b", tOUTMUX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tOUTMUX_exp[2] = tOUTMUX_expected_prev[2];
	end
	if (
		( tOUTMUX_expected_prev[3] !== 1'bx ) && ( tOUTMUX_prev[3] !== tOUTMUX_expected_prev[3] )
		&& ((tOUTMUX_expected_prev[3] !== last_tOUTMUX_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTMUX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTMUX_expected_prev);
		$display ("     Real value = %b", tOUTMUX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tOUTMUX_exp[3] = tOUTMUX_expected_prev[3];
	end
	if (
		( tOUTPC_expected_prev[0] !== 1'bx ) && ( tOUTPC_prev[0] !== tOUTPC_expected_prev[0] )
		&& ((tOUTPC_expected_prev[0] !== last_tOUTPC_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTPC_expected_prev);
		$display ("     Real value = %b", tOUTPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tOUTPC_exp[0] = tOUTPC_expected_prev[0];
	end
	if (
		( tOUTPC_expected_prev[1] !== 1'bx ) && ( tOUTPC_prev[1] !== tOUTPC_expected_prev[1] )
		&& ((tOUTPC_expected_prev[1] !== last_tOUTPC_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTPC_expected_prev);
		$display ("     Real value = %b", tOUTPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tOUTPC_exp[1] = tOUTPC_expected_prev[1];
	end
	if (
		( tOUTPC_expected_prev[2] !== 1'bx ) && ( tOUTPC_prev[2] !== tOUTPC_expected_prev[2] )
		&& ((tOUTPC_expected_prev[2] !== last_tOUTPC_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTPC_expected_prev);
		$display ("     Real value = %b", tOUTPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tOUTPC_exp[2] = tOUTPC_expected_prev[2];
	end
	if (
		( tOUTPC_expected_prev[3] !== 1'bx ) && ( tOUTPC_prev[3] !== tOUTPC_expected_prev[3] )
		&& ((tOUTPC_expected_prev[3] !== last_tOUTPC_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTPC_expected_prev);
		$display ("     Real value = %b", tOUTPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tOUTPC_exp[3] = tOUTPC_expected_prev[3];
	end
	if (
		( tOUTRDM_expected_prev[0] !== 1'bx ) && ( tOUTRDM_prev[0] !== tOUTRDM_expected_prev[0] )
		&& ((tOUTRDM_expected_prev[0] !== last_tOUTRDM_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[0] = tOUTRDM_expected_prev[0];
	end
	if (
		( tOUTRDM_expected_prev[1] !== 1'bx ) && ( tOUTRDM_prev[1] !== tOUTRDM_expected_prev[1] )
		&& ((tOUTRDM_expected_prev[1] !== last_tOUTRDM_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[1] = tOUTRDM_expected_prev[1];
	end
	if (
		( tOUTRDM_expected_prev[2] !== 1'bx ) && ( tOUTRDM_prev[2] !== tOUTRDM_expected_prev[2] )
		&& ((tOUTRDM_expected_prev[2] !== last_tOUTRDM_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[2] = tOUTRDM_expected_prev[2];
	end
	if (
		( tOUTRDM_expected_prev[3] !== 1'bx ) && ( tOUTRDM_prev[3] !== tOUTRDM_expected_prev[3] )
		&& ((tOUTRDM_expected_prev[3] !== last_tOUTRDM_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[3] = tOUTRDM_expected_prev[3];
	end
	if (
		( tOUTRDM_expected_prev[4] !== 1'bx ) && ( tOUTRDM_prev[4] !== tOUTRDM_expected_prev[4] )
		&& ((tOUTRDM_expected_prev[4] !== last_tOUTRDM_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[4] = tOUTRDM_expected_prev[4];
	end
	if (
		( tOUTRDM_expected_prev[5] !== 1'bx ) && ( tOUTRDM_prev[5] !== tOUTRDM_expected_prev[5] )
		&& ((tOUTRDM_expected_prev[5] !== last_tOUTRDM_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[5] = tOUTRDM_expected_prev[5];
	end
	if (
		( tOUTRDM_expected_prev[6] !== 1'bx ) && ( tOUTRDM_prev[6] !== tOUTRDM_expected_prev[6] )
		&& ((tOUTRDM_expected_prev[6] !== last_tOUTRDM_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[6] = tOUTRDM_expected_prev[6];
	end
	if (
		( tOUTRDM_expected_prev[7] !== 1'bx ) && ( tOUTRDM_prev[7] !== tOUTRDM_expected_prev[7] )
		&& ((tOUTRDM_expected_prev[7] !== last_tOUTRDM_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[7] = tOUTRDM_expected_prev[7];
	end
	if (
		( tOUTRDM_expected_prev[8] !== 1'bx ) && ( tOUTRDM_prev[8] !== tOUTRDM_expected_prev[8] )
		&& ((tOUTRDM_expected_prev[8] !== last_tOUTRDM_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[8] = tOUTRDM_expected_prev[8];
	end
	if (
		( tOUTRDM_expected_prev[9] !== 1'bx ) && ( tOUTRDM_prev[9] !== tOUTRDM_expected_prev[9] )
		&& ((tOUTRDM_expected_prev[9] !== last_tOUTRDM_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[9] = tOUTRDM_expected_prev[9];
	end
	if (
		( tOUTRDM_expected_prev[10] !== 1'bx ) && ( tOUTRDM_prev[10] !== tOUTRDM_expected_prev[10] )
		&& ((tOUTRDM_expected_prev[10] !== last_tOUTRDM_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[10] = tOUTRDM_expected_prev[10];
	end
	if (
		( tOUTRDM_expected_prev[11] !== 1'bx ) && ( tOUTRDM_prev[11] !== tOUTRDM_expected_prev[11] )
		&& ((tOUTRDM_expected_prev[11] !== last_tOUTRDM_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[11] = tOUTRDM_expected_prev[11];
	end
	if (
		( tOUTRDM_expected_prev[12] !== 1'bx ) && ( tOUTRDM_prev[12] !== tOUTRDM_expected_prev[12] )
		&& ((tOUTRDM_expected_prev[12] !== last_tOUTRDM_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[12] = tOUTRDM_expected_prev[12];
	end
	if (
		( tOUTRDM_expected_prev[13] !== 1'bx ) && ( tOUTRDM_prev[13] !== tOUTRDM_expected_prev[13] )
		&& ((tOUTRDM_expected_prev[13] !== last_tOUTRDM_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[13] = tOUTRDM_expected_prev[13];
	end
	if (
		( tOUTRDM_expected_prev[14] !== 1'bx ) && ( tOUTRDM_prev[14] !== tOUTRDM_expected_prev[14] )
		&& ((tOUTRDM_expected_prev[14] !== last_tOUTRDM_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[14] = tOUTRDM_expected_prev[14];
	end
	if (
		( tOUTRDM_expected_prev[15] !== 1'bx ) && ( tOUTRDM_prev[15] !== tOUTRDM_expected_prev[15] )
		&& ((tOUTRDM_expected_prev[15] !== last_tOUTRDM_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTRDM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTRDM_expected_prev);
		$display ("     Real value = %b", tOUTRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tOUTRDM_exp[15] = tOUTRDM_expected_prev[15];
	end
	if (
		( tOUTREM_expected_prev[0] !== 1'bx ) && ( tOUTREM_prev[0] !== tOUTREM_expected_prev[0] )
		&& ((tOUTREM_expected_prev[0] !== last_tOUTREM_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTREM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTREM_expected_prev);
		$display ("     Real value = %b", tOUTREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tOUTREM_exp[0] = tOUTREM_expected_prev[0];
	end
	if (
		( tOUTREM_expected_prev[1] !== 1'bx ) && ( tOUTREM_prev[1] !== tOUTREM_expected_prev[1] )
		&& ((tOUTREM_expected_prev[1] !== last_tOUTREM_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTREM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTREM_expected_prev);
		$display ("     Real value = %b", tOUTREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tOUTREM_exp[1] = tOUTREM_expected_prev[1];
	end
	if (
		( tOUTREM_expected_prev[2] !== 1'bx ) && ( tOUTREM_prev[2] !== tOUTREM_expected_prev[2] )
		&& ((tOUTREM_expected_prev[2] !== last_tOUTREM_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTREM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTREM_expected_prev);
		$display ("     Real value = %b", tOUTREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tOUTREM_exp[2] = tOUTREM_expected_prev[2];
	end
	if (
		( tOUTREM_expected_prev[3] !== 1'bx ) && ( tOUTREM_prev[3] !== tOUTREM_expected_prev[3] )
		&& ((tOUTREM_expected_prev[3] !== last_tOUTREM_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTREM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTREM_expected_prev);
		$display ("     Real value = %b", tOUTREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tOUTREM_exp[3] = tOUTREM_expected_prev[3];
	end
	if (
		( tOUTULA_expected_prev[0] !== 1'bx ) && ( tOUTULA_prev[0] !== tOUTULA_expected_prev[0] )
		&& ((tOUTULA_expected_prev[0] !== last_tOUTULA_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[0] = tOUTULA_expected_prev[0];
	end
	if (
		( tOUTULA_expected_prev[1] !== 1'bx ) && ( tOUTULA_prev[1] !== tOUTULA_expected_prev[1] )
		&& ((tOUTULA_expected_prev[1] !== last_tOUTULA_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[1] = tOUTULA_expected_prev[1];
	end
	if (
		( tOUTULA_expected_prev[2] !== 1'bx ) && ( tOUTULA_prev[2] !== tOUTULA_expected_prev[2] )
		&& ((tOUTULA_expected_prev[2] !== last_tOUTULA_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[2] = tOUTULA_expected_prev[2];
	end
	if (
		( tOUTULA_expected_prev[3] !== 1'bx ) && ( tOUTULA_prev[3] !== tOUTULA_expected_prev[3] )
		&& ((tOUTULA_expected_prev[3] !== last_tOUTULA_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[3] = tOUTULA_expected_prev[3];
	end
	if (
		( tOUTULA_expected_prev[4] !== 1'bx ) && ( tOUTULA_prev[4] !== tOUTULA_expected_prev[4] )
		&& ((tOUTULA_expected_prev[4] !== last_tOUTULA_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[4] = tOUTULA_expected_prev[4];
	end
	if (
		( tOUTULA_expected_prev[5] !== 1'bx ) && ( tOUTULA_prev[5] !== tOUTULA_expected_prev[5] )
		&& ((tOUTULA_expected_prev[5] !== last_tOUTULA_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[5] = tOUTULA_expected_prev[5];
	end
	if (
		( tOUTULA_expected_prev[6] !== 1'bx ) && ( tOUTULA_prev[6] !== tOUTULA_expected_prev[6] )
		&& ((tOUTULA_expected_prev[6] !== last_tOUTULA_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[6] = tOUTULA_expected_prev[6];
	end
	if (
		( tOUTULA_expected_prev[7] !== 1'bx ) && ( tOUTULA_prev[7] !== tOUTULA_expected_prev[7] )
		&& ((tOUTULA_expected_prev[7] !== last_tOUTULA_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tOUTULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tOUTULA_expected_prev);
		$display ("     Real value = %b", tOUTULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tOUTULA_exp[7] = tOUTULA_expected_prev[7];
	end
	if (
		( tR_expected_prev !== 1'bx ) && ( tR_prev !== tR_expected_prev )
		&& ((tR_expected_prev !== last_tR_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tR_expected_prev);
		$display ("     Real value = %b", tR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tR_exp = tR_expected_prev;
	end
	if (
		( tSel_expected_prev !== 1'bx ) && ( tSel_prev !== tSel_expected_prev )
		&& ((tSel_expected_prev !== last_tSel_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tSel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tSel_expected_prev);
		$display ("     Real value = %b", tSel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_tSel_exp = tSel_expected_prev;
	end
	if (
		( tW_expected_prev !== 1'bx ) && ( tW_prev !== tW_expected_prev )
		&& ((tW_expected_prev !== last_tW_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tW_expected_prev);
		$display ("     Real value = %b", tW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_tW_exp = tW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] CargaAC;
reg [3:0] CargaPC;
reg [15:0] CargaRDM;
reg [3:0] CargaREM;
reg CLK;
reg CLKmaq;
reg Gravar;
// wires                                               
wire [6:0] Display1;
wire [6:0] Display2;
wire [6:0] Display3;
wire [6:0] Display4;
wire Encerra;
wire [7:0] Saida;
wire [15:0] tINMEM;
wire [7:0] tOUTAC;
wire [15:0] tOUTMEM;
wire [3:0] tOUTMUX;
wire [3:0] tOUTPC;
wire [15:0] tOUTRDM;
wire [3:0] tOUTREM;
wire [7:0] tOUTULA;
wire tR;
wire tSel;
wire tW;

wire sampler;                             

// assign statements (if any)                          
Neander i1 (
// port map - connection between master ports and signals/registers   
	.CargaAC(CargaAC),
	.CargaPC(CargaPC),
	.CargaRDM(CargaRDM),
	.CargaREM(CargaREM),
	.CLK(CLK),
	.CLKmaq(CLKmaq),
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.Display4(Display4),
	.Encerra(Encerra),
	.Gravar(Gravar),
	.Saida(Saida),
	.tINMEM(tINMEM),
	.tOUTAC(tOUTAC),
	.tOUTMEM(tOUTMEM),
	.tOUTMUX(tOUTMUX),
	.tOUTPC(tOUTPC),
	.tOUTRDM(tOUTRDM),
	.tOUTREM(tOUTREM),
	.tOUTULA(tOUTULA),
	.tR(tR),
	.tSel(tSel),
	.tW(tW)
);

// CLK
initial
begin
	repeat(21)
	begin
		CLK = 1'b0;
		CLK = #23150 1'b1;
		# 23150;
	end
	CLK = 1'b0;
	CLK = #23150 1'b1;
end 
// CargaRDM[ 15 ]
initial
begin
	CargaRDM[15] = 1'b0;
	CargaRDM[15] = #300000 1'b1;
	CargaRDM[15] = #100000 1'b0;
end 
// CargaRDM[ 14 ]
initial
begin
	CargaRDM[14] = 1'b0;
	CargaRDM[14] = #300000 1'b1;
	CargaRDM[14] = #100000 1'b0;
end 
// CargaRDM[ 13 ]
initial
begin
	CargaRDM[13] = 1'b0;
	CargaRDM[13] = #300000 1'b1;
	CargaRDM[13] = #100000 1'b0;
end 
// CargaRDM[ 12 ]
initial
begin
	CargaRDM[12] = 1'b0;
	CargaRDM[12] = #300000 1'b1;
	CargaRDM[12] = #100000 1'b0;
end 
// CargaRDM[ 11 ]
initial
begin
	CargaRDM[11] = 1'b1;
	CargaRDM[11] = #400000 1'b0;
end 
// CargaRDM[ 10 ]
initial
begin
	CargaRDM[10] = 1'b1;
	CargaRDM[10] = #400000 1'b0;
end 
// CargaRDM[ 9 ]
initial
begin
	CargaRDM[9] = 1'b1;
	CargaRDM[9] = #400000 1'b0;
end 
// CargaRDM[ 8 ]
initial
begin
	CargaRDM[8] = 1'b1;
	CargaRDM[8] = #400000 1'b0;
end 
// CargaRDM[ 7 ]
initial
begin
	CargaRDM[7] = 1'b0;
	CargaRDM[7] = #100000 1'b1;
	CargaRDM[7] = #300000 1'b0;
end 
// CargaRDM[ 6 ]
initial
begin
	CargaRDM[6] = 1'b0;
	CargaRDM[6] = #200000 1'b1;
	CargaRDM[6] = #100000 1'b0;
end 
// CargaRDM[ 5 ]
initial
begin
	CargaRDM[5] = 1'b0;
	CargaRDM[5] = #100000 1'b1;
	CargaRDM[5] = #300000 1'b0;
end 
// CargaRDM[ 4 ]
initial
begin
	CargaRDM[4] = 1'b1;
	CargaRDM[4] = #100000 1'b0;
	CargaRDM[4] = #100000 1'b1;
	CargaRDM[4] = #100000 1'b0;
end 
// CargaRDM[ 3 ]
initial
begin
	CargaRDM[3] = 1'b0;
	CargaRDM[3] = #300000 1'b1;
	CargaRDM[3] = #100000 1'b0;
end 
// CargaRDM[ 2 ]
initial
begin
	CargaRDM[2] = 1'b0;
	CargaRDM[2] = #100000 1'b1;
	CargaRDM[2] = #100000 1'b0;
	CargaRDM[2] = #100000 1'b1;
	CargaRDM[2] = #100000 1'b0;
end 
// CargaRDM[ 1 ]
initial
begin
	CargaRDM[1] = 1'b1;
	CargaRDM[1] = #100000 1'b0;
	CargaRDM[1] = #200000 1'b1;
	CargaRDM[1] = #100000 1'b0;
end 
// CargaRDM[ 0 ]
initial
begin
	CargaRDM[0] = 1'b0;
	CargaRDM[0] = #100000 1'b1;
	CargaRDM[0] = #300000 1'b0;
end 
// CargaREM[ 3 ]
initial
begin
	CargaREM[3] = 1'b1;
	CargaREM[3] = #100000 1'b0;
	CargaREM[3] = #100000 1'b1;
	CargaREM[3] = #200000 1'b0;
end 
// CargaREM[ 2 ]
initial
begin
	CargaREM[2] = 1'b0;
	CargaREM[2] = #300000 1'b1;
	CargaREM[2] = #100000 1'b0;
end 
// CargaREM[ 1 ]
initial
begin
	CargaREM[1] = 1'b1;
	CargaREM[1] = #100000 1'b0;
	CargaREM[1] = #100000 1'b1;
	CargaREM[1] = #200000 1'b0;
end 
// CargaREM[ 0 ]
initial
begin
	CargaREM[0] = 1'b1;
	CargaREM[0] = #200000 1'b0;
	CargaREM[0] = #100000 1'b1;
	CargaREM[0] = #100000 1'b0;
end 

// Gravar
initial
begin
	Gravar = 1'b1;
	Gravar = #420000 1'b0;
end 

Neander_vlg_sample_tst tb_sample (
	.CargaAC(CargaAC),
	.CargaPC(CargaPC),
	.CargaRDM(CargaRDM),
	.CargaREM(CargaREM),
	.CLK(CLK),
	.CLKmaq(CLKmaq),
	.Gravar(Gravar),
	.sampler_tx(sampler)
);

Neander_vlg_check_tst tb_out(
	.Display1(Display1),
	.Display2(Display2),
	.Display3(Display3),
	.Display4(Display4),
	.Encerra(Encerra),
	.Saida(Saida),
	.tINMEM(tINMEM),
	.tOUTAC(tOUTAC),
	.tOUTMEM(tOUTMEM),
	.tOUTMUX(tOUTMUX),
	.tOUTPC(tOUTPC),
	.tOUTRDM(tOUTRDM),
	.tOUTREM(tOUTREM),
	.tOUTULA(tOUTULA),
	.tR(tR),
	.tSel(tSel),
	.tW(tW),
	.sampler_rx(sampler)
);
endmodule

